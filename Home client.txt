"use client"

import { useState, useEffect, useRef } from "react"
import {
  Search,
  ShoppingCart,
  User,
  ChevronLeft,
  ChevronRight,
  Star,
  Heart,
  Eye,
  X,
  Plus,
  Minus,
  Trash2,
  LogOut,
  Package,
  Settings,
} from "lucide-react"
import { useNavigate } from "react-router-dom"
import axios from "axios"

const Home = () => {
  const [cartItems, setCartItems] = useState([])
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [currentAnnouncement, setCurrentAnnouncement] = useState(0)
  const [notification, setNotification] = useState("")
  const [isCartOpen, setIsCartOpen] = useState(false)
  const [isProfileDropdownOpen, setIsProfileDropdownOpen] = useState(false)
  const [user, setUser] = useState(null)
  const categoriesRef = useRef(null)
  const newArrivalsRef = useRef(null)
  const revisedRatesRef = useRef(null)
  const navigate = useNavigate()

  // Sample product data with revised rates
  const products = [
    {
      id: 1,
      name: "Ocean Wave Coasters Set",
      price: 29.99,
      originalPrice: 39.99,
      category: "coasters",
      rating: 4.8,
      reviews: 124,
      image: "🌊",
      isFeatured: true,
      isNew: true,
      isRevised: false,
    },
    {
      id: 2,
      name: "Galaxy Wall Art Panel",
      price: 89.99,
      originalPrice: 129.99,
      category: "wall-art",
      rating: 4.9,
      reviews: 87,
      image: "🌌",
      isFeatured: true,
      isNew: false,
      isRevised: true,
    },
    {
      id: 3,
      name: "Crystal Drop Earrings",
      price: 24.99,
      originalPrice: 34.99,
      category: "jewelry",
      rating: 4.7,
      reviews: 203,
      image: "💎",
      isFeatured: true,
      isNew: true,
      isRevised: false,
    },
    {
      id: 4,
      name: "Marble Effect Serving Tray",
      price: 45.99,
      originalPrice: 65.99,
      category: "trays",
      rating: 4.6,
      reviews: 156,
      image: "🍽️",
      isFeatured: true,
      isNew: false,
      isRevised: true,
    },
    {
      id: 5,
      name: "Forest Scene Keychain",
      price: 12.99,
      originalPrice: 18.99,
      category: "keychains",
      rating: 4.8,
      reviews: 94,
      image: "🌲",
      isFeatured: false,
      isNew: true,
      isRevised: false,
    },
    {
      id: 6,
      name: "Flower Pressed Bookmark",
      price: 8.99,
      originalPrice: 12.99,
      category: "bookmarks",
      rating: 4.5,
      reviews: 67,
      image: "🌸",
      isFeatured: false,
      isNew: false,
      isRevised: true,
    },
    {
      id: 7,
      name: "Sunset Gradient Coasters",
      price: 32.99,
      originalPrice: 49.99,
      category: "coasters",
      rating: 4.9,
      reviews: 178,
      image: "🌅",
      isFeatured: true,
      isNew: false,
      isRevised: true,
    },
    {
      id: 8,
      name: "Abstract Rainbow Wall Art",
      price: 124.99,
      originalPrice: 179.99,
      category: "wall-art",
      rating: 5.0,
      reviews: 45,
      image: "🌈",
      isFeatured: true,
      isNew: true,
      isRevised: false,
    },
    {
      id: 9,
      name: "Geometric Pendant Necklace",
      price: 39.99,
      originalPrice: 59.99,
      category: "jewelry",
      rating: 4.7,
      reviews: 112,
      image: "⬡",
      isFeatured: false,
      isNew: false,
      isRevised: true,
    },
    {
      id: 10,
      name: "Gold Leaf Serving Tray",
      price: 67.99,
      originalPrice: 89.99,
      category: "trays",
      rating: 4.8,
      reviews: 89,
      image: "🍃",
      isFeatured: true,
      isNew: true,
      isRevised: false,
    },
    {
      id: 11,
      name: "Mountain Landscape Keychain",
      price: 14.99,
      originalPrice: 22.99,
      category: "keychains",
      rating: 4.6,
      reviews: 76,
      image: "🏔️",
      isFeatured: false,
      isNew: false,
      isRevised: true,
    },
    {
      id: 12,
      name: "Butterfly Garden Bookmark",
      price: 10.99,
      originalPrice: 16.99,
      category: "bookmarks",
      rating: 4.4,
      reviews: 52,
      image: "🦋",
      isFeatured: false,
      isNew: true,
      isRevised: false,
    },
    {
      id: 13,
      name: "Celestial Phone Case",
      price: 18.99,
      originalPrice: 28.99,
      category: "phone-cases",
      rating: 4.6,
      reviews: 89,
      image: "📱",
      isFeatured: false,
      isNew: true,
      isRevised: false,
    },
    {
      id: 14,
      name: "Geometric Candle Holder",
      price: 28.99,
      originalPrice: 42.99,
      category: "candles",
      rating: 4.7,
      reviews: 156,
      image: "🕯️",
      isFeatured: false,
      isNew: false,
      isRevised: true,
    },
    {
      id: 15,
      name: "Ocean Waves Ring Dish",
      price: 22.99,
      originalPrice: 34.99,
      category: "dishes",
      rating: 4.8,
      reviews: 73,
      image: "🌀",
      isFeatured: false,
      isNew: true,
      isRevised: false,
    },
  ]

  const categories = [
    { id: "all", name: "All Products", icon: "🎨", count: products.length },
    { id: "coasters", name: "Coasters", icon: "☕", count: products.filter((p) => p.category === "coasters").length },
    { id: "wall-art", name: "Wall Art", icon: "🖼️", count: products.filter((p) => p.category === "wall-art").length },
    { id: "jewelry", name: "Jewelry", icon: "💎", count: products.filter((p) => p.category === "jewelry").length },
    { id: "trays", name: "Serving Trays", icon: "🍽️", count: products.filter((p) => p.category === "trays").length },
    {
      id: "keychains",
      name: "Keychains",
      icon: "🔑",
      count: products.filter((p) => p.category === "keychains").length,
    },
    {
      id: "bookmarks",
      name: "Bookmarks",
      icon: "📚",
      count: products.filter((p) => p.category === "bookmarks").length,
    },
    {
      id: "phone-cases",
      name: "Phone Cases",
      icon: "📱",
      count: products.filter((p) => p.category === "phone-cases").length,
    },
    {
      id: "candles",
      name: "Candle Holders",
      icon: "🕯️",
      count: products.filter((p) => p.category === "candles").length,
    },
    { id: "dishes", name: "Ring Dishes", icon: "🌀", count: products.filter((p) => p.category === "dishes").length },
  ]

  const announcements = [
    "🎉 FREE SHIPPING on orders over $75! | New Resin Art Collection Available Now! 🎨",
    "✨ Limited Time: 30% OFF all Wall Art pieces! Use code WALL30 ✨",
    "🆕 Just Added: Custom Resin Art Commissions Now Available! 🎨",
    "💝 Perfect Gifts: Resin Jewelry Starting at $24.99! 💎",
  ]

  // Filter products based on search and category
  const filteredProducts = products.filter((product) => {
    const matchesSearch =
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.category.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory === "all" || product.category === selectedCategory
    return matchesSearch && matchesCategory
  })

  const featuredProducts = products.filter((product) => product.isFeatured)
  const newProducts = products.filter((product) => product.isNew)
  const revisedProducts = products.filter((product) => product.isRevised)

  // Add to cart functionality
  const addToCart = (product) => {
    setCartItems((prev) => {
      const existing = prev.find((item) => item.id === product.id)
      if (existing) {
        return prev.map((item) => (item.id === product.id ? { ...item, quantity: item.quantity + 1 } : item))
      } else {
        return [...prev, { ...product, quantity: 1 }]
      }
    })

    setNotification(`✅ ${product.name} added to cart!`)
    setTimeout(() => setNotification(""), 3000)
  }

  // Update cart item quantity
  const updateCartQuantity = (productId, newQuantity) => {
    if (newQuantity === 0) {
      setCartItems((prev) => prev.filter((item) => item.id !== productId))
    } else {
      setCartItems((prev) => prev.map((item) => (item.id === productId ? { ...item, quantity: newQuantity } : item)))
    }
  }

  // Remove item from cart
  const removeFromCart = (productId) => {
    setCartItems((prev) => prev.filter((item) => item.id !== productId))
  }

  const getTotalCartItems = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0)
  }

  const getTotalCartValue = () => {
    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0)
  }

  // Function to handle the logout
  const handleLogout = async () => {
    try {
      const res = await axios.post(
        "https://api.simplyrks.cloud/api/auth/logout",
        {},
        {
          withCredentials: true,
        },
      )
      navigate("/auth/login")
    } catch (err) {
      console.log(err)
    }
  }

  // Cycle through announcements
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentAnnouncement((prev) => (prev + 1) % announcements.length)
    }, 5000)
    return () => clearInterval(interval)
  }, [])

  // Use effect for checking whether user is login or not
  useEffect(() => {
    const checkLogin = async () => {
      try {
        const res = await axios.get("https://api.simplyrks.cloud/api/auth/me", { withCredentials: true })
        setUser(res.data.user)
      } catch (err) {
        setUser(null)
        navigate("/auth/login")
      }
    }
    checkLogin()
  }, [])

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest(".profile-dropdown") && !event.target.closest(".profile-button")) {
        setIsProfileDropdownOpen(false)
      }
    }
    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [])

  // Scroll functions
  const scrollCategories = (direction) => {
    if (categoriesRef.current) {
      const scrollAmount = 200
      const newScrollLeft = categoriesRef.current.scrollLeft + (direction === "left" ? -scrollAmount : scrollAmount)
      categoriesRef.current.scrollTo({ left: newScrollLeft, behavior: "smooth" })
    }
  }

  const scrollNewArrivals = (direction) => {
    if (newArrivalsRef.current) {
      const scrollAmount = 300
      const newScrollLeft = newArrivalsRef.current.scrollLeft + (direction === "left" ? -scrollAmount : scrollAmount)
      newArrivalsRef.current.scrollTo({ left: newScrollLeft, behavior: "smooth" })
    }
  }

  const scrollRevisedRates = (direction) => {
    if (revisedRatesRef.current) {
      const scrollAmount = 300
      const newScrollLeft = revisedRatesRef.current.scrollLeft + (direction === "left" ? -scrollAmount : scrollAmount)
      revisedRatesRef.current.scrollTo({ left: newScrollLeft, behavior: "smooth" })
    }
  }

  // Scroll to restocked items
  const scrollToRestockedItems = () => {
    const element = document.getElementById("restocked-items")
    if (element) {
      element.scrollIntoView({ behavior: "smooth" })
    }
  }

  const ProductCard = ({ product, showDiscount = false }) => {
    const discountPercentage =
      showDiscount && product.originalPrice
        ? Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)
        : 0

    return (
      <div className="group relative bg-white dark:bg-gray-900 rounded-xl sm:rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 sm:hover:-translate-y-2 overflow-hidden flex-shrink-0 w-64 sm:w-auto">
        {product.isNew && (
          <div className="absolute top-2 sm:top-3 left-2 sm:left-3 z-10 bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
            NEW
          </div>
        )}

        {showDiscount && discountPercentage > 0 && (
          <div className="absolute top-2 sm:top-3 right-2 sm:right-3 z-10 bg-gradient-to-r from-red-500 to-rose-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
            {discountPercentage}% OFF
          </div>
        )}

        <div className="relative bg-gradient-to-br from-amber-400 via-yellow-400 to-orange-400 h-40 sm:h-48 flex items-center justify-center text-3xl sm:text-4xl overflow-hidden">
          <div className="absolute inset-0 bg-black opacity-0 group-hover:opacity-10 transition-opacity duration-300"></div>
          <span className="filter drop-shadow-lg text-3xl sm:text-4xl lg:text-6xl">{product.image}</span>

          <div className="absolute top-2 sm:top-3 right-2 sm:right-3 flex space-x-1 sm:space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <button className="p-1.5 sm:p-2 bg-white dark:bg-gray-900/90 rounded-full shadow-lg hover:bg-white dark:bg-gray-900 transition-colors">
              <Heart className="w-3 h-3 sm:w-4 sm:h-4 text-red-500" />
            </button>
            <button className="p-1.5 sm:p-2 bg-white dark:bg-gray-900/90 rounded-full shadow-lg hover:bg-white dark:bg-gray-900 transition-colors">
              <Eye className="w-3 h-3 sm:w-4 sm:h-4 text-gray-600 dark:text-gray-400" />
            </button>
          </div>
        </div>

        <div className="p-3 sm:p-4">
          <h3 className="font-bold -800 dark:text-gray-100 mb-2 text-sm sm:text-base lg:text-lg line-clamp-2">{product.name}</h3>

          <div className="flex items-center mb-3">
            <div className="flex items-center space-x-1">
              {[...Array(5)].map((_, i) => (
                <Star
                  key={i}
                  className={`w-3 h-3 sm:w-4 sm:h-4 ${i < Math.floor(product.rating) ? "text-yellow-400 fill-current" : "text-gray-300"}`}
                />
              ))}
            </div>
            <span className="text-xs sm:text-sm text-gray-600 dark:text-gray-400 ml-2">({product.reviews})</span>
          </div>

          <div className="flex items-center justify-between gap-2">
            <div className="flex flex-col">
              {showDiscount && product.originalPrice && (
                <span className="text-xs sm:text-sm text-gray-500 line-through">${product.originalPrice}</span>
              )}
              <span className="font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600 text-base sm:text-lg lg:text-xl">
                ${product.price}
              </span>
            </div>
            <button
              onClick={() => addToCart(product)}
              className="bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-2 py-1.5 sm:px-3 sm:py-2 lg:px-4 lg:py-2 rounded-full font-semibold hover:from-amber-600 hover:to-yellow-600 transform hover:scale-105 transition-all duration-200 shadow-lg text-xs sm:text-sm"
            >
              Add to Cart
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Cart Sidebar Component
  const CartSidebar = () => (
    <div className={`fixed inset-0 z-50 ${isCartOpen ? "pointer-events-auto" : "pointer-events-none"}`}>
      {/* Backdrop */}
      <div
        className={`absolute inset-0 bg-black transition-opacity duration-300 ${isCartOpen ? "opacity-50" : "opacity-0"}`}
        onClick={() => setIsCartOpen(false)}
      ></div>

      {/* Cart Panel */}
      <div
        className={`absolute right-0 top-0 h-full w-full max-w-sm sm:max-w-md bg-white dark:bg-gray-900 shadow-2xl transform transition-transform duration-300 ${isCartOpen ? "translate-x-0" : "translate-x-full"} flex flex-col`}
      >
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
          <h3 className="text-lg font-semibold text-gray-900">Shopping Cart ({getTotalCartItems()})</h3>
          <button onClick={() => setIsCartOpen(false)} className="p-2 hover:bg-gray-100 rounded-full">
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Cart Items */}
        <div className="flex-1 overflow-y-auto p-4">
          {cartItems.length === 0 ? (
            <div className="text-center py-8">
              <ShoppingCart className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500">Your cart is empty</p>
            </div>
          ) : (
            <div className="space-y-4">
              {cartItems.map((item) => (
                <div key={item.id} className="flex items-center gap-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <div className="w-12 h-12 sm:w-16 sm:h-16 bg-gradient-to-br from-amber-400 via-yellow-400 to-orange-400 rounded-lg flex items-center justify-center text-xl sm:text-2xl">
                    {item.image}
                  </div>

                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium text-gray-900 truncate text-sm sm:text-base">{item.name}</h4>
                    <p className="text-sm text-gray-500">${item.price}</p>
                  </div>

                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => updateCartQuantity(item.id, item.quantity - 1)}
                      className="p-1 hover:bg-white dark:bg-gray-900 rounded"
                    >
                      <Minus className="w-4 h-4" />
                    </button>
                    <span className="w-8 text-center text-sm font-medium">{item.quantity}</span>
                    <button
                      onClick={() => updateCartQuantity(item.id, item.quantity + 1)}
                      className="p-1 hover:bg-white dark:bg-gray-900 rounded"
                    >
                      <Plus className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => removeFromCart(item.id)}
                      className="p-1 hover:bg-red-100 rounded text-red-500 ml-2"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        {cartItems.length > 0 && (
          <div className="border-t border-gray-200 dark:border-gray-700 p-4">
            <div className="flex items-center justify-between mb-4">
              <span className="text-lg font-semibold">Total: ${getTotalCartValue().toFixed(2)}</span>
            </div>
            <button className="w-full bg-gradient-to-r from-amber-500 to-yellow-500 text-white py-3 rounded-lg font-semibold hover:from-amber-600 hover:to-yellow-600 transition-colors">
              Checkout
            </button>
          </div>
        )}
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-50">
      {/* Notification */}
      {notification && (
        <div className="fixed top-16 sm:top-20 right-2 sm:right-4 z-50 bg-gradient-to-r from-green-500 to-emerald-500 text-white px-3 py-2 sm:px-4 sm:py-2 lg:px-6 lg:py-3 rounded-lg shadow-lg animate-pulse text-xs sm:text-sm lg:text-base max-w-xs sm:max-w-sm">
          {notification}
        </div>
      )}

      {/* Cart Sidebar */}
      <CartSidebar />

      {/* Announcement Bar */}
      <div className="bg-gradient-to-r from-amber-600 to-yellow-600 text-white text-center py-2 sm:py-3 px-2 sm:px-4 text-xs sm:text-sm font-medium overflow-hidden">
        <div className="animate-pulse">{announcements[currentAnnouncement]}</div>
      </div>

      {/* Header */}
      <header className="sticky top-0 z-40 bg-white dark:bg-gray-900/95 backdrop-blur-md shadow-lg">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-6 xl:px-8">
          <div className="flex items-center justify-between h-12 sm:h-14 lg:h-16">
            {/* Logo */}
            <div className="flex-shrink-0 flex items-center">
              <img src="/images/logo.png" alt="Oula Market Logo" className="h-8 sm:h-10 lg:h-12 w-auto mr-2 sm:mr-3" />
              <h1 className="text-lg sm:text-xl lg:text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600 hidden sm:block">
                Oula Market
              </h1>
            </div>

            {/* Search Bar - Hidden on mobile, shown on larger screens */}
            <div className="hidden lg:flex flex-1 max-w-md mx-4 xl:mx-8">
              <div className="relative w-full">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Search products..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-amber-500 focus:border-transparent outline-none bg-white dark:bg-gray-900/90 backdrop-blur-sm"
                />
              </div>
            </div>

            {/* Right Section */}
            <div className="flex items-center space-x-1 sm:space-x-2 lg:space-x-4">
              {/* Mobile Search */}
              <div className="lg:hidden">
                <button className="p-1.5 sm:p-2 text-gray-700 hover:text-amber-600 transition-colors">
                  <Search className="w-4 h-4 sm:w-5 sm:h-5" />
                </button>
              </div>

              {/* Profile Dropdown */}
              <div className="relative">
                <button
                  className="profile-button p-1.5 sm:p-2 text-gray-700 hover:text-amber-600 transition-colors"
                  onClick={() => setIsProfileDropdownOpen(!isProfileDropdownOpen)}
                >
                  <User className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6" />
                </button>

                {/* Dropdown Menu */}
                {isProfileDropdownOpen && (
                  <div className="profile-dropdown absolute right-0 mt-2 w-44 sm:w-48 bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-2 z-50">
                    <a
                      href="#"
                      className="flex items-center px-3 sm:px-4 py-2 text-xs sm:text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                    >
                      <Settings className="w-3 h-3 sm:w-4 sm:h-4 mr-2 sm:mr-3" />
                      Manage Profile
                    </a>
                    <a
                      href="#"
                      className="flex items-center px-3 sm:px-4 py-2 text-xs sm:text-sm text-gray-700 hover:bg-gray-100 transition-colors"
                    >
                      <Package className="w-3 h-3 sm:w-4 sm:h-4 mr-2 sm:mr-3" />
                      Orders
                    </a>
                    <hr className="my-1" />
                    <a
                      onClick={handleLogout}
                      className="flex items-center px-3 sm:px-4 py-2 text-xs sm:text-sm text-gray-700 hover:bg-gray-100 transition-colors cursor-pointer"
                    >
                      <LogOut className="w-3 h-3 sm:w-4 sm:h-4 mr-2 sm:mr-3" />
                      Logout
                    </a>
                  </div>
                )}
              </div>

              {/* Cart Button */}
              <button
                onClick={() => setIsCartOpen(true)}
                className="relative p-1.5 sm:p-2 text-gray-700 hover:text-amber-600 transition-colors"
              >
                <ShoppingCart className="w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6" />
                {getTotalCartItems() > 0 && (
                  <span className="absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-rose-500 text-white text-xs rounded-full w-4 h-4 sm:w-5 sm:h-5 flex items-center justify-center font-bold text-xs">
                    {getTotalCartItems()}
                  </span>
                )}
              </button>
            </div>
          </div>

          {/* Mobile Search Bar */}
          <div className="lg:hidden pb-3 sm:pb-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search products..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-amber-500 focus:border-transparent outline-none"
              />
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="relative overflow-hidden py-8 sm:py-12 lg:py-16 xl:py-20 px-2 sm:px-4 lg:px-6 xl:px-8">
        <div className="absolute inset-0 bg-gradient-to-br from-amber-100 via-yellow-50 to-orange-100 opacity-70"></div>
        <div className="relative max-w-7xl mx-auto text-center">
          <h2 className="text-2xl sm:text-3xl lg:text-4xl xl:text-5xl 2xl:text-6xl font-bold text-gray-900 mb-3 sm:mb-4 lg:mb-6 px-2">
            Stunning{" "}
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600">
              Resin Art
            </span>{" "}
            Creations
          </h2>
          <p className="text-sm sm:text-base lg:text-lg xl:text-xl text-gray-600 dark:text-gray-400 mb-4 sm:mb-6 lg:mb-8 max-w-3xl mx-auto px-2 sm:px-4">
            Discover handcrafted resin masterpieces that bring color and elegance to your space. From functional
            coasters to breathtaking wall art.
          </p>
          <div className="flex flex-col sm:flex-row gap-2 sm:gap-3 lg:gap-4 justify-center px-2 sm:px-4">
            <button className="bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-4 py-2.5 sm:px-6 sm:py-3 lg:px-8 lg:py-3 rounded-full font-semibold hover:from-amber-600 hover:to-yellow-600 transform hover:scale-105 transition-all duration-200 shadow-lg text-sm sm:text-base">
              Shop Now
            </button>
            <button
              onClick={scrollToRestockedItems}
              className="border-2 border-amber-600 text-amber-600 px-4 py-2.5 sm:px-6 sm:py-3 lg:px-8 lg:py-3 rounded-full font-semibold hover:bg-amber-600 hover:text-white transition-all duration-200 text-sm sm:text-base"
            >
              Explore Restocked Items
            </button>
          </div>
        </div>
      </section>

      {/* New Arrivals This Week - Scrollable */}
      <section className="bg-gradient-to-r from-orange-500 to-amber-500 text-white py-6 sm:py-8 lg:py-12 px-2 sm:px-4 lg:px-6 xl:px-8 relative overflow-hidden">
        <div className="absolute inset-0 bg-black opacity-10"></div>
        <div className="relative max-w-7xl mx-auto">
          <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold mb-3 sm:mb-4 lg:mb-6 text-center">
            ✨ New Arrivals This Week ✨
          </h3>
          <p className="text-sm sm:text-base lg:text-lg opacity-90 mb-4 sm:mb-6 lg:mb-8 text-center">
            Check out our latest collection of handcrafted resin art pieces
          </p>

          <div className="relative">
            {/* Scroll Buttons */}
            <button
              onClick={() => scrollNewArrivals("left")}
              className="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-white dark:bg-gray-900/90 shadow-lg rounded-full p-2 hover:bg-white dark:bg-gray-900 transition-colors"
            >
              <ChevronLeft className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-gray-400" />
            </button>

            <button
              onClick={() => scrollNewArrivals("right")}
              className="absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-white dark:bg-gray-900/90 shadow-lg rounded-full p-2 hover:bg-white dark:bg-gray-900 transition-colors"
            >
              <ChevronRight className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-gray-400" />
            </button>

            {/* Scrollable New Products */}
            <div
              ref={newArrivalsRef}
              className="flex space-x-3 sm:space-x-4 lg:space-x-6 overflow-x-auto scrollbar-hide pb-4 px-8 scroll-smooth"
              style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
            >
              {newProducts.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Categories with Scroll */}
      <section className="py-8 sm:py-12 lg:py-16 px-2 sm:px-4 lg:px-6 xl:px-8" id="categories">
        <div className="max-w-7xl mx-auto">
          <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-center mb-6 sm:mb-8 lg:mb-12 text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600">
            Shop by Category
          </h3>

          <div className="relative">
            {/* Scroll Buttons */}
            <button
              onClick={() => scrollCategories("left")}
              className="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-white dark:bg-gray-900 shadow-lg rounded-full p-2 hover:bg-gray-50 dark:bg-gray-800 transition-colors"
            >
              <ChevronLeft className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-gray-400" />
            </button>

            <button
              onClick={() => scrollCategories("right")}
              className="absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-white dark:bg-gray-900 shadow-lg rounded-full p-2 hover:bg-gray-50 dark:bg-gray-800 transition-colors"
            >
              <ChevronRight className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-gray-400" />
            </button>

            {/* Scrollable Categories */}
            <div
              ref={categoriesRef}
              className="flex space-x-3 sm:space-x-4 overflow-x-auto scrollbar-hide pb-4 px-6 sm:px-8 scroll-smooth"
              style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
            >
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`flex-shrink-0 p-3 sm:p-4 lg:p-6 rounded-xl sm:rounded-2xl text-center transition-all duration-300 transform hover:scale-105 min-w-[100px] sm:min-w-[120px] lg:min-w-[140px] ${
                    selectedCategory === category.id
                      ? "bg-gradient-to-br from-amber-500 to-yellow-500 text-white shadow-xl"
                      : "bg-white dark:bg-gray-900 shadow-lg hover:shadow-xl text-gray-700"
                  }`}
                >
                  <div className="text-xl sm:text-2xl lg:text-3xl mb-1 sm:mb-2">{category.icon}</div>
                  <h4 className="font-semibold text-xs sm:text-sm mb-1 leading-tight">{category.name}</h4>
                  <p className="text-xs opacity-75">({category.count} items)</p>
                </button>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Revised Rates Section - Scrollable */}
      <section className="py-8 sm:py-12 lg:py-16 px-2 sm:px-4 lg:px-6 xl:px-8 bg-white dark:bg-gray-900/50">
        <div className="max-w-7xl mx-auto">
          <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-center mb-6 sm:mb-8 lg:mb-12 text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600">
            🔥 Revised Rates - Limited Time Offers
          </h3>

          <div className="relative">
            {/* Scroll Buttons */}
            <button
              onClick={() => scrollRevisedRates("left")}
              className="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-white dark:bg-gray-900 shadow-lg rounded-full p-2 hover:bg-gray-50 dark:bg-gray-800 transition-colors"
            >
              <ChevronLeft className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-gray-400" />
            </button>

            <button
              onClick={() => scrollRevisedRates("right")}
              className="absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-white dark:bg-gray-900 shadow-lg rounded-full p-2 hover:bg-gray-50 dark:bg-gray-800 transition-colors"
            >
              <ChevronRight className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600 dark:text-gray-400" />
            </button>

            {/* Scrollable Revised Products */}
            <div
              ref={revisedRatesRef}
              className="flex space-x-3 sm:space-x-4 lg:space-x-6 overflow-x-auto scrollbar-hide pb-4 px-6 sm:px-8 scroll-smooth"
              style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
            >
              {revisedProducts.map((product) => (
                <ProductCard key={product.id} product={product} showDiscount={true} />
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Featured Products */}
      <section className="py-8 sm:py-12 lg:py-16 px-2 sm:px-4 lg:px-6 xl:px-8" id="products">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-6 sm:mb-8 lg:mb-12 gap-2 sm:gap-4">
            <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600">
              {selectedCategory === "all"
                ? "Featured Products"
                : categories.find((c) => c.id === selectedCategory)?.name}
            </h3>
            <div className="text-xs sm:text-sm text-gray-600 dark:text-gray-400">Showing {filteredProducts.length} products</div>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 xl:gap-8">
            {filteredProducts.slice(0, 8).map((product) => (
              <div key={product.id} className="w-full">
                <ProductCard product={product} />
              </div>
            ))}
          </div>

          {filteredProducts.length > 8 && (
            <div className="text-center mt-6 sm:mt-8 lg:mt-12">
              <button className="bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-4 py-2.5 sm:px-6 sm:py-3 lg:px-8 lg:py-3 rounded-full font-semibold hover:from-amber-600 hover:to-yellow-600 transform hover:scale-105 transition-all duration-200 shadow-lg text-sm sm:text-base">
                Load More Products
              </button>
            </div>
          )}
        </div>
      </section>

      {/* Restocked Items Section */}
      <section id="restocked-items" className="py-8 sm:py-12 lg:py-16 px-2 sm:px-4 lg:px-6 xl:px-8 bg-white dark:bg-gray-900/50">
        <div className="max-w-7xl mx-auto">
          <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-center mb-6 sm:mb-8 lg:mb-12 text-transparent bg-clip-text bg-gradient-to-r from-amber-600 to-yellow-600">
            📦 Restocked Items
          </h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6">
            {revisedProducts.slice(0, 8).map((product) => (
              <div key={product.id} className="w-full">
                <ProductCard product={product} />
              </div>
            ))}
          </div>

          {revisedProducts.length > 8 && (
            <div className="text-center mt-6 sm:mt-8 lg:mt-12">
              <button className="bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-4 py-2.5 sm:px-6 sm:py-3 lg:px-8 lg:py-3 rounded-full font-semibold hover:from-amber-600 hover:to-yellow-600 transform hover:scale-105 transition-all duration-200 shadow-lg text-sm sm:text-base">
                View All Restocked Items
              </button>
            </div>
          )}
        </div>
      </section>

      {/* Newsletter Section */}
      <section className="py-8 sm:py-12 lg:py-16 px-2 sm:px-4 lg:px-6 xl:px-8 bg-gradient-to-r from-amber-600 to-yellow-600">
        <div className="max-w-4xl mx-auto text-center">
          <h3 className="text-xl sm:text-2xl lg:text-3xl font-bold text-white mb-3 sm:mb-4">
            Stay Updated with New Collections
          </h3>
          <p className="text-amber-100 mb-4 sm:mb-6 lg:mb-8 text-sm sm:text-base lg:text-lg px-2">
            Be the first to know about new arrivals, special offers, and exclusive resin art pieces.
          </p>
          <div className="flex flex-col sm:flex-row gap-2 sm:gap-3 lg:gap-4 max-w-md mx-auto px-2">
            <input
              type="email"
              placeholder="Enter your email"
              className="flex-1 px-3 py-2.5 sm:px-4 sm:py-3 rounded-full border-0 focus:ring-2 focus:ring-amber-300 outline-none text-sm sm:text-base"
            />
            <button className="bg-white dark:bg-gray-900 text-amber-600 px-4 py-2.5 sm:px-6 sm:py-3 rounded-full font-semibold hover:bg-gray-100 transition-colors whitespace-nowrap text-sm sm:text-base">
              Subscribe Now
            </button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-900 text-white py-8 sm:py-12 lg:py-16 px-2 sm:px-4 lg:px-6 xl:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 lg:gap-8">
            <div className="sm:col-span-2 lg:col-span-1">
              <div className="flex items-center mb-3 sm:mb-4">
                <img
                  src="/images/logo.png"
                  alt="Oula Market Logo"
                  className="h-8 sm:h-10 w-auto mr-2 sm:mr-3 filter brightness-0 invert"
                />
                <h4 className="text-lg sm:text-xl lg:text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-amber-400 to-yellow-400">
                  Oula Market
                </h4>
              </div>
              <p className="text-gray-300 text-xs sm:text-sm lg:text-base">
                Creating handcrafted resin art pieces that blend functionality with beauty. Each piece is unique and
                made with love.
              </p>
            </div>

            <div>
              <h5 className="font-semibold text-amber-400 mb-3 sm:mb-4 text-sm sm:text-base lg:text-lg">Quick Links</h5>
              <ul className="space-y-1 sm:space-y-2">
                {["Home", "Products", "Categories", "About Us", "Contact"].map((link) => (
                  <li key={link}>
                    <a
                      href="#"
                      className="text-gray-300 hover:text-white transition-colors text-xs sm:text-sm lg:text-base"
                    >
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <h5 className="font-semibold text-amber-400 mb-3 sm:mb-4 text-sm sm:text-base lg:text-lg">
                Customer Service
              </h5>
              <ul className="space-y-1 sm:space-y-2">
                {["Contact Us", "Shipping Info", "Returns", "Size Guide", "FAQ"].map((link) => (
                  <li key={link}>
                    <a
                      href="#"
                      className="text-gray-300 hover:text-white transition-colors text-xs sm:text-sm lg:text-base"
                    >
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            <div>
              <h5 className="font-semibold text-amber-400 mb-3 sm:mb-4 text-sm sm:text-base lg:text-lg">
                Connect With Us
              </h5>
              <ul className="space-y-1 sm:space-y-2">
                {["Instagram", "Facebook", "Pinterest", "Email Newsletter"].map((link) => (
                  <li key={link}>
                    <a
                      href="#"
                      className="text-gray-300 hover:text-white transition-colors text-xs sm:text-sm lg:text-base"
                    >
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>

          <div className="border-t border-gray-800 mt-6 sm:mt-8 lg:mt-12 pt-4 sm:pt-6 lg:pt-8 text-center">
            <p className="text-gray-400 text-xs sm:text-sm lg:text-base">
              &copy; 2025 Oula Market. All rights reserved. | Made with ❤️ for art lovers
            </p>
          </div>
        </div>
      </footer>

      <style jsx>{`
        .scrollbar-hide {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }
        .line-clamp-2 {
          display: -webkit-box;
          -webkit-line-clamp: 2;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
      `}</style>
    </div>
  )
}

export default Home

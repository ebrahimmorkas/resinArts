Okay now there are some additions and some validations as well.

Addition:

Size variant section:- 

Like you created the product details section in the same way size section that is

One text field for size and one text field for price.

Create this 4 by default and one button for adding Add optional details for this variant  for each size.

Category section:

Dropdown for selecting the product category for now insert dump data later from DB and besides this the another dropdown that is for sub category.

Pricing section:-

The validations:-

If base price is containing some value:

Then all the price fields in both the variants that is Color and size and pricing section should be disabled.

If not filled and if filled in any of the variants then the price field in other variant and base price and pricing section should be disabled. 

If neither base price is filled nor price fields in both of the variants is filled then only pricing section should be enabled.


import React, { useState } from 'react';
import { Trash2, Plus } from 'lucide-react';

export default function AddProductForm() {
  const [formData, setFormData] = useState({
    name: '',
    price: '',
  });

  const [details, setDetails] = useState([
    { name: '', value: '' },
    { name: '', value: '' },
    { name: '', value: '' }
  ]);

  const [colorVariants, setColorVariants] = useState([
    {
      color: '',
      image: null,
      price: '',
      isDefault: false,
      optionalDetails: []
    }
  ]);

  const [sizeVariants, setSizeVariants] = useState([
    { size: '', price: '', optionalDetails: [] },
    { size: '', price: '', optionalDetails: [] },
    { size: '', price: '', optionalDetails: [] },
    { size: '', price: '', optionalDetails: [] }
  ]);

  const [category, setCategory] = useState({
    main: '',
    sub: ''
  });

  const [pricingSections, setPricingSections] = useState([
    { color: '', size: '', price: '' },
    { color: '', size: '', price: '' },
    { color: '', size: '', price: '' },
    { color: '', size: '', price: '' }
  ]);

  // Dummy data for categories
  const categories = {
    'Electronics': ['Smartphones', 'Laptops', 'Headphones', 'Cameras'],
    'Clothing': ['T-Shirts', 'Jeans', 'Dresses', 'Shoes'],
    'Home & Garden': ['Furniture', 'Decor', 'Kitchen', 'Tools'],
    'Sports': ['Fitness', 'Outdoor', 'Team Sports', 'Water Sports']
  };

  // Pricing validation logic
  const hasBasePrice = formData.price && parseFloat(formData.price) > 0;
  const hasColorVariantPrice = colorVariants.some(variant => variant.price && parseFloat(variant.price) > 0);
  const hasSizeVariantPrice = sizeVariants.some(variant => variant.price && parseFloat(variant.price) > 0);
  const hasAnyVariantPrice = hasColorVariantPrice || hasSizeVariantPrice;

  const isPricingSectionEnabled = !hasBasePrice && !hasAnyVariantPrice;
  const areVariantPricesDisabled = hasBasePrice;
  const isBasePriceDisabled = hasAnyVariantPrice;
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleDetailChange = (index, field, value) => {
    const updatedDetails = [...details];
    updatedDetails[index][field] = value;
    setDetails(updatedDetails);
  };

  const addMoreDetails = () => {
    setDetails([...details, { name: '', value: '' }]);
  };

  const removeDetail = (index) => {
    if (details.length > 1) {
      setDetails(details.filter((_, i) => i !== index));
    }
  };

  const handleVariantChange = (variantIndex, field, value) => {
    const updatedVariants = [...colorVariants];
    updatedVariants[variantIndex][field] = value;
    
    // Handle default checkbox logic
    if (field === 'isDefault' && value) {
      updatedVariants.forEach((variant, index) => {
        variant.isDefault = index === variantIndex;
      });
    }
    
    setColorVariants(updatedVariants);
  };

  const handleOptionalDetailChange = (variantIndex, detailIndex, field, value) => {
    const updatedVariants = [...colorVariants];
    updatedVariants[variantIndex].optionalDetails[detailIndex][field] = value;
    setColorVariants(updatedVariants);
  };

  const addOptionalDetail = (variantIndex) => {
    const updatedVariants = [...colorVariants];
    updatedVariants[variantIndex].optionalDetails.push({ name: '', value: '' });
    setColorVariants(updatedVariants);
  };

  const removeOptionalDetail = (variantIndex, detailIndex) => {
    const updatedVariants = [...colorVariants];
    updatedVariants[variantIndex].optionalDetails = updatedVariants[variantIndex].optionalDetails.filter((_, i) => i !== detailIndex);
    setColorVariants(updatedVariants);
  };

  const addColorVariant = () => {
    setColorVariants([
      ...colorVariants,
      {
        color: '',
        image: null,
        price: '',
        isDefault: false,
        optionalDetails: []
      }
    ]);
  };

  const removeColorVariant = (index) => {
    if (colorVariants.length > 1) {
      setColorVariants(colorVariants.filter((_, i) => i !== index));
    }
  };

  const handleImageUpload = (variantIndex, event) => {
    const file = event.target.files[0];
    if (file) {
      const updatedVariants = [...colorVariants];
      updatedVariants[variantIndex].image = file;
      setColorVariants(updatedVariants);
    }
  };

  const handleSubmit = () => {
    console.log('Form Data:', formData);
    console.log('Details:', details);
    console.log('Color Variants:', colorVariants);
    console.log('Size Variants:', sizeVariants);
    console.log('Category:', category);
    console.log('Pricing Sections:', pricingSections);
    // Handle form submission here
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Add New Product</h1>
        <p className="text-gray-600">Fill in the product details to add it to your inventory</p>
      </div>

      <div className="space-y-8">
        {/* Basic Product Info */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Basic Information</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Product Name *
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => handleFormChange('name', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter product name"
                required
              />
            </div>

        {/* Size Variants Section */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Size Variants</h2>
          
          <div className="space-y-6">
            {sizeVariants.map((variant, variantIndex) => (
              <div key={variantIndex} className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-gray-800">
                    Size Variant {variantIndex + 1}
                  </h3>
                  {sizeVariants.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeSizeVariant(variantIndex)}
                      className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
                    >
                      <Trash2 size={18} />
                    </button>
                  )}
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Size *
                    </label>
                    <input
                      type="text"
                      value={variant.size}
                      onChange={(e) => handleSizeVariantChange(variantIndex, 'size', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="e.g., S, M, L, XL, 32, 34"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Price
                    </label>
                    <input
                      type="number"
                      value={variant.price}
                      onChange={(e) => handleSizeVariantChange(variantIndex, 'price', e.target.value)}
                      className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                        areVariantPricesDisabled ? 'bg-gray-100 cursor-not-allowed' : ''
                      }`}
                      placeholder="0.00"
                      min="0"
                      step="0.01"
                      disabled={areVariantPricesDisabled}
                    />
                  </div>
                </div>

                {/* Optional Details for Size Variant */}
                {variant.optionalDetails.length > 0 && (
                  <div className="mb-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Optional Details for this Variant</h4>
                    <div className="space-y-2">
                      {variant.optionalDetails.map((detail, detailIndex) => (
                        <div key={detailIndex} className="flex gap-2 items-start">
                          <input
                            type="text"
                            value={detail.name}
                            onChange={(e) => handleSizeOptionalDetailChange(variantIndex, detailIndex, 'name', e.target.value)}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Detail name"
                          />
                          <input
                            type="text"
                            value={detail.value}
                            onChange={(e) => handleSizeOptionalDetailChange(variantIndex, detailIndex, 'value', e.target.value)}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Detail value"
                          />
                          <button
                            type="button"
                            onClick={() => removeSizeOptionalDetail(variantIndex, detailIndex)}
                            className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <button
                  type="button"
                  onClick={() => addSizeOptionalDetail(variantIndex)}
                  className="flex items-center gap-2 px-4 py-2 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors"
                >
                  <Plus size={14} />
                  Add optional details for this variant
                </button>
              </div>
            ))}
          </div>
          
          <button
            type="button"
            onClick={addSizeVariant}
            className="mt-6 flex items-center gap-2 px-6 py-3 bg-blue-600 text-white hover:bg-blue-700 rounded-md transition-colors font-medium"
          >
            <Plus size={16} />
            Add Size Variant
          </button>
        </div>

        {/* Pricing Section */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">
            Pricing Matrix
            {!isPricingSectionEnabled && (
              <span className="ml-2 text-sm text-gray-500">(Disabled - Base price or variant prices are set)</span>
            )}
          </h2>
          
          <div className="space-y-4">
            {pricingSections.map((section, index) => (
              <div key={index} className="flex gap-4 items-start">
                <div className="flex-1">
                  <select
                    value={section.color}
                    onChange={(e) => handlePricingSectionChange(index, 'color', e.target.value)}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      !isPricingSectionEnabled ? 'bg-gray-100 cursor-not-allowed' : ''
                    }`}
                    disabled={!isPricingSectionEnabled}
                  >
                    <option value="">Select Color</option>
                    {getUniqueColors().map(color => (
                      <option key={color} value={color}>{color}</option>
                    ))}
                  </select>
                </div>
                <div className="flex-1">
                  <select
                    value={section.size}
                    onChange={(e) => handlePricingSectionChange(index, 'size', e.target.value)}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      !isPricingSectionEnabled ? 'bg-gray-100 cursor-not-allowed' : ''
                    }`}
                    disabled={!isPricingSectionEnabled}
                  >
                    <option value="">Select Size</option>
                    {getUniqueSizes().map(size => (
                      <option key={size} value={size}>{size}</option>
                    ))}
                  </select>
                </div>
                <div className="flex-1">
                  <input
                    type="number"
                    value={section.price}
                    onChange={(e) => handlePricingSectionChange(index, 'price', e.target.value)}
                    className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                      !isPricingSectionEnabled ? 'bg-gray-100 cursor-not-allowed' : ''
                    }`}
                    placeholder="0.00"
                    min="0"
                    step="0.01"
                    disabled={!isPricingSectionEnabled}
                  />
                </div>
                {pricingSections.length > 1 && (
                  <button
                    type="button"
                    onClick={() => removePricingSection(index)}
                    className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
                    disabled={!isPricingSectionEnabled}
                  >
                    <Trash2 size={18} />
                  </button>
                )}
              </div>
            ))}
          </div>
          
          <button
            type="button"
            onClick={addPricingSection}
            className={`mt-4 flex items-center gap-2 px-4 py-2 rounded-md transition-colors ${
              isPricingSectionEnabled 
                ? 'text-blue-600 hover:text-blue-800 hover:bg-blue-50' 
                : 'text-gray-400 cursor-not-allowed bg-gray-100'
            }`}
            disabled={!isPricingSectionEnabled}
          >
            <Plus size={16} />
            Add more pricing section
          </button>
        </div>

        {/* Category Section */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Category</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Main Category *
              </label>
              <select
                value={category.main}
                onChange={(e) => handleCategoryChange('main', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              >
                <option value="">Select main category</option>
                {Object.keys(categories).map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Sub Category *
              </label>
              <select
                value={category.sub}
                onChange={(e) => handleCategoryChange('sub', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                disabled={!category.main}
                required
              >
                <option value="">Select sub category</option>
                {category.main && categories[category.main]?.map(subCat => (
                  <option key={subCat} value={subCat}>{subCat}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Base Price *
              </label>
              <input
                type="number"
                value={formData.price}
                onChange={(e) => handleFormChange('price', e.target.value)}
                className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                  isBasePriceDisabled ? 'bg-gray-100 cursor-not-allowed' : ''
                }`}
                placeholder="0.00"
                min="0"
                step="0.01"
                disabled={isBasePriceDisabled}
                required={!hasAnyVariantPrice && isPricingSectionEnabled}
              />
            </div>
          </div>
        </div>

        {/* Details Section */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Product Details</h2>
          
          <div className="space-y-4">
            {details.map((detail, index) => (
              <div key={index} className="flex gap-4 items-start">
                <div className="flex-1">
                  <input
                    type="text"
                    value={detail.name}
                    onChange={(e) => handleDetailChange(index, 'name', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Detail name (e.g., Material)"
                  />
                </div>
                <div className="flex-1">
                  <input
                    type="text"
                    value={detail.value}
                    onChange={(e) => handleDetailChange(index, 'value', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Detail value (e.g., Cotton)"
                  />
                </div>
                {details.length > 1 && (
                  <button
                    type="button"
                    onClick={() => removeDetail(index)}
                    className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
                  >
                    <Trash2 size={18} />
                  </button>
                )}
              </div>
            ))}
          </div>
          
          <button
            type="button"
            onClick={addMoreDetails}
            className="mt-4 flex items-center gap-2 px-4 py-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors"
          >
            <Plus size={16} />
            Add more details
          </button>
        </div>

        {/* Color Variants Section */}
        <div className="bg-gray-50 p-6 rounded-lg">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Color Variants</h2>
          
          <div className="space-y-6">
            {colorVariants.map((variant, variantIndex) => (
              <div key={variantIndex} className="bg-white p-6 rounded-lg border border-gray-200">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-gray-800">
                    Color Variant {variantIndex + 1}
                  </h3>
                  {colorVariants.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeColorVariant(variantIndex)}
                      className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
                    >
                      <Trash2 size={18} />
                    </button>
                  )}
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Color *
                    </label>
                    <input
                      type="text"
                      value={variant.color}
                      onChange={(e) => handleVariantChange(variantIndex, 'color', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="e.g., Red, Blue, #FF5733"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Image
                    </label>
                    <input
                      type="file"
                      onChange={(e) => handleImageUpload(variantIndex, e)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      accept="image/*"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Price (for all sizes)
                    </label>
                    <input
                      type="number"
                      value={variant.price}
                      onChange={(e) => handleVariantChange(variantIndex, 'price', e.target.value)}
                      className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                        areVariantPricesDisabled ? 'bg-gray-100 cursor-not-allowed' : ''
                      }`}
                      placeholder="0.00"
                      min="0"
                      step="0.01"
                      disabled={areVariantPricesDisabled}
                    />
                  </div>
                </div>

                {/* Default Checkbox */}
                <div className="mb-4">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={variant.isDefault}
                      onChange={(e) => handleVariantChange(variantIndex, 'isDefault', e.target.checked)}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                    />
                    <span className="ml-2 text-sm font-medium text-gray-700">Set as default variant</span>
                  </label>
                </div>

                {/* Optional Details for Variant */}
                {variant.optionalDetails.length > 0 && (
                  <div className="mb-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Optional Details for this Variant</h4>
                    <div className="space-y-2">
                      {variant.optionalDetails.map((detail, detailIndex) => (
                        <div key={detailIndex} className="flex gap-2 items-start">
                          <input
                            type="text"
                            value={detail.name}
                            onChange={(e) => handleOptionalDetailChange(variantIndex, detailIndex, 'name', e.target.value)}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Detail name"
                          />
                          <input
                            type="text"
                            value={detail.value}
                            onChange={(e) => handleOptionalDetailChange(variantIndex, detailIndex, 'value', e.target.value)}
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                            placeholder="Detail value"
                          />
                          <button
                            type="button"
                            onClick={() => removeOptionalDetail(variantIndex, detailIndex)}
                            className="p-2 text-red-500 hover:text-red-700 hover:bg-red-50 rounded-md transition-colors"
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                <button
                  type="button"
                  onClick={() => addOptionalDetail(variantIndex)}
                  className="flex items-center gap-2 px-4 py-2 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-colors"
                >
                  <Plus size={14} />
                  Add optional details for this variant
                </button>
              </div>
            ))}
          </div>
          
          <button
            type="button"
            onClick={addColorVariant}
            className="mt-6 flex items-center gap-2 px-6 py-3 bg-blue-600 text-white hover:bg-blue-700 rounded-md transition-colors font-medium"
          >
            <Plus size={16} />
            Add Variants
          </button>
        </div>

        {/* Submit Button */}
        <div className="flex justify-end gap-4 pt-6 border-t border-gray-200">
          <button
            type="button"
            className="px-6 py-3 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={handleSubmit}
            className="px-8 py-3 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors font-medium"
          >
            Add Product
          </button>
        </div>
      </div>
    </div>
  );
}